IoC(Inversion Of Control):제어 역전
IoC 컨테이너
POJO(Plain Old Java Object) : 단순한 일말 하는 Bean 객체, '오래된' 방식의 '순수한' 자바객체

IoC 컨테이너의 종류
BeanFactory : 클라이언트 요청(lookup)에 의해서만 <bean> 객체가 생성되는 지연로딩(lazy loading) 방식을 사용
              Bean에 관련된 설정을 위한 xml 파일은 즉시 로딩하지만 객체는 개발자가 요구할 때만 생성한다.

XmlBeanFactory

ApplicationContext : 컨테이너가 구동되는 시점에 <bean>에 등록된 클래스들을 객체 생성하는 즉시 로딩(pre-loading>방식으로 동작
                     Bean에 관련된 설정을 위한 xml파일은 즉시 로딩하면서 객체를 미리생성해서 가지고 있다

ClassPathXmlApplicationContext
FileSystemXmlApplicationContext
XmlWebAppliicationContext

스프링 프레임워크는 IoC 컨테이너를 이용해 Bean 객체들을 관리한다.

Spring Bean 객체 생성
Spring 에서는 사용할 Bean 객체를 bean configuration file에 정의를 하고 필요할 때 가져와 사용한다.

bean 태그 : 사용할 Bean을 정의하는 태그

Bean 태그의 기본 속성
class : 객체를 생성하기 위해 사용할 클래스를 지정
id : 객체를 가져오기 위해 사용하는 이름
lazy-init : 싱글톤인 경우 xml을 로딩할 때 객체 생성 여부를 설정한다.
            true : xml 로딩 시 객체를 생성하지 않고 객체를 가져올 때 생성

scope : 객체 범위 설정
    singleton : 객체를 하나만 생성해
    '서 사용
    prototype : 객체를 가져올 때 마다 객체를 생성


06_BeanLifeCycle
Singleton 인 경우 xml 파일을 로딩할 때 객체가 생성
Singleton이고 lazy-init 속성이 true일 경우 getBean 메서드를 사용할 때 객체 생성
prototype일 경우 getBean 메서드를 사용할 때 객체가 생성

IoC 컨테이너 종료 때 객체가 소멸

객체 생성과 소멸시 호출될 메서드
init-method : 생성자 호출 후 자동으로 호출된다
destroy-method : 객체가 소멸될 때 자동으로 호출된다
default-init-method : init method 를 설정하지 않은 경우 자동으로 호출된다
default-destroy-method : destroy-method 를 설정하지 않은 경우 자동으로 호출된다.

메서드가 없을 경우
init-method :  오류 발생
destroy-method :  오류 발생
default-init-method : 아무일도 발생하지 않는다.
default-destroy-method : 아무일도 발생하지 않는다.
